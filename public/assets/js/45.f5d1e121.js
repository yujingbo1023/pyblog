(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{696:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-简述列举了解的编程语言及语言区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简述列举了解的编程语言及语言区别"}},[t._v("#")]),t._v(" 1. 简述列举了解的编程语言及语言区别")]),t._v(" "),s("p",[t._v("编译型语言: 一次性把代码都编译成二进制, 然后运行\n解释型语言: 一行一行, 编译一句, 运行一句\n1.python 解释型 简洁高效, 容易上手\n2.java   混合型(JVM, JIT编译器), 开发周期慢, 突出在web方向\n3.c      编译型 属于计算机底层语言, 只有面向过程, 没有面向对象\n4.c++\t 编译型 属于计算机底层语言, 既有面向过程, 也有面向对象\n5.go\t 编译型 应用在区块链, 高并发高可用, 也可以突出在游戏领域")]),t._v(" "),s("h2",{attrs:{id:"_2-列举python2和python3的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-列举python2和python3的区别"}},[t._v("#")]),t._v(" 2. 列举Python2和Python3的区别")]),t._v(" "),s("p",[s("strong",[t._v("python2.x")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('1.print "123"\n2.range 返回列表\n3.默认编码 -- ascii\n4.两种类: 经典类 和 新式类\n\tclass Car():pass  经典类(多继承当中的搜索原则采用深度优先)\n\tclass Car(object):pass 新式类(多继承当中的搜索原则采用广度优先)\n5.除法/: 结果是整型\n6.int(4) long(长整型8)\n7.raw_input <=> python3.x input\n')])])]),s("p",[s("strong",[t._v("python3.x")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('1.print("12")\n2.range 返回的是 可迭代对象\n3.默认编码 utf-8\n4.都是新式类(广度优先)  类.mro() => 继承关系列表\n5.除法/: 结果是小数\n6.int\n7.input\n')])])]),s("p",[t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_3-看代码写结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-看代码写结果"}},[t._v("#")]),t._v(" 3. 看代码写结果")]),t._v(" "),s("p",[t._v("逻辑运算符优先级 () > not > and > or")]),t._v(" "),s("p",[t._v("逻辑短路\nTrue or print(111)\t\nFalse and print(222)")]),t._v(" "),s("p",[t._v("and 逻辑与 全真则真 一假则假\nor  逻辑或 全假则假 一真则真")]),t._v(" "),s("p",[t._v("布尔值为假的十种情况:\n0 0.0 False 0j '' () [] set() {} None")]),t._v(" "),s("p",[t._v("复数: 实数 + 虚数")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("复数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4j")]),t._v("\n实数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  虚数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4j")]),t._v("\n如果有一个数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 他的平方等于"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 那么这个数就是j\n科学家认为有"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 表达高精度类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("v1 = 1 or 2\nprint(v1)")]),t._v(" "),s("p",[t._v("v2 = 3 and 7 or 9 and 0")]),t._v(" "),s("p",[t._v("v2 = 7 or 0")]),t._v(" "),s("p",[t._v("print(v2)")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_4-比较以下值有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较以下值有什么不同"}},[t._v("#")]),t._v(" 4. 比较以下值有什么不同")]),t._v(" "),s("p",[t._v('"""逗号是区分是否是元组的标识符"""\nv1 = [1, 2, 3]\nv2 = [(1), (2), (3)]\nv3 = [(1, ), (2, ), (3, )]')]),t._v(" "),s("p",[t._v("v1 列表  v2 列表 v3里面的元素是元组")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_5-用一行代码实现数值交换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-用一行代码实现数值交换"}},[t._v("#")]),t._v(" 5. 用一行代码实现数值交换")]),t._v(" "),s("p",[t._v("python特有：")]),t._v(" "),s("p",[t._v("a, b = b, a")]),t._v(" "),s("p",[t._v("方法二：")]),t._v(" "),s("p",[t._v("tmp = a\na = b\nb = tmp")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_6-python中的单引号-双引号-三引号有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-python中的单引号-双引号-三引号有什么区别"}},[t._v("#")]),t._v(" 6. python中的单引号，双引号，三引号有什么区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("单双引号没有任何区别,三引号可以支持跨行\n在引号互相嵌套时,里面不能使用相同的引号\n")])])]),s("h2",{attrs:{id:"_7-is和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-is和-的区别"}},[t._v("#")]),t._v(" 7. is和==的区别？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("is 是判断内存地址是否相同\n== 判断两边的值是否相同\n")])])]),s("p",[t._v("针对于整型 在-5 ~ 正无穷 [python3.6之前有效]")]),t._v(" "),s("p",[t._v("var1 = -100\nvar2 = -100\nprint(var1 is var2)")]),t._v(" "),s("h2",{attrs:{id:"_8-python里如何实现tuple和list的转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-python里如何实现tuple和list的转化"}},[t._v("#")]),t._v(" 8. python里如何实现tuple和list的转化")]),t._v(" "),s("p",[t._v("int float complex bool str list tuple set dict")]),t._v(" "),s("p",[t._v("tuple(数据)  list(数据)")]),t._v(" "),s("p",[t._v("字典的键 和 集合的值 有数据类型上的要求")]),t._v(" "),s("p",[t._v("Number ( int float complex bool) str tuple (可哈希 不可变的数据类型)")]),t._v(" "),s("p",[t._v("强转成字典, 对数据类型的要求是?")]),t._v(" "),s("p",[t._v('""" 里面容器的元素个数都相同 是等长  """\n等长的二级容器, 并且元素个数是2个\nprint(  dict([("a", 1), ["b", 2]]) )')]),t._v(" "),s("p",[t._v('dict([ ("a", [1, 2, 3]) , ["b" , 456] ])\ndic = {"a":1, "b":2}')]),t._v(" "),s("h2",{attrs:{id:"_9-如何实现字符串name-老男孩-的反转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何实现字符串name-老男孩-的反转"}},[t._v("#")]),t._v(" 9. 如何实现字符串name='老男孩'的反转")]),t._v(" "),s("p",[t._v("name[::-1]")]),t._v(" "),s("h2",{attrs:{id:"_10-两个set如何获取交集-并集-差集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-两个set如何获取交集-并集-差集"}},[t._v("#")]),t._v(" 10. 两个set如何获取交集，并集，差集？")]),t._v(" "),s("p",[t._v("交集 &\n集合.intersection(集合2)")]),t._v(" "),s("p",[t._v("差集 -\ndifference")]),t._v(" "),s("p",[t._v("并集 |\nunion")]),t._v(" "),s("p",[t._v("对称差集 ^\nsymmetric_difference")]),t._v(" "),s("h2",{attrs:{id:"_11-哪些情况下-y-x-x-y-会成立"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-哪些情况下-y-x-x-y-会成立"}},[t._v("#")]),t._v(" 11. 哪些情况下，y!=x-(x-y)会成立")]),t._v(" "),s("p",[t._v('"""非空集合且不为子父关系的两个集合"""')]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("x = {1, 2, 5}\ny = {2, 8}\ny != x - (x-y)\n\n\n{2, 8} != {1, 2, 5} - {1, 5}\n{2, 8} != {2}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"_12-python中如何拷贝一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-python中如何拷贝一个对象"}},[t._v("#")]),t._v(" 12. python中如何拷贝一个对象")]),t._v(" "),s("h3",{attrs:{id:"_1-浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-浅拷贝"}},[t._v("#")]),t._v(" 1，浅拷贝")]),t._v(" "),s("p",[t._v("第1种：")]),t._v(" "),s("p",[t._v("import copy")]),t._v(" "),s("p",[t._v("第2种：")]),t._v(" "),s("p",[t._v("lst = [1, 2, 3].copy()")]),t._v(" "),s("p",[t._v("第3种： 切片")]),t._v(" "),s("p",[t._v("lst[:] 或者  lst[::]")]),t._v(" "),s("p",[t._v("下面的代码并没有实现copy的效果")]),t._v(" "),s("p",[t._v("lst = [1, 2, 3]\nlst2 = lst[:]   浅copy\nlst.append(4)\nprint(lst, lst2)")]),t._v(" "),s("h3",{attrs:{id:"_2-深拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-深拷贝"}},[t._v("#")]),t._v(" 2，深拷贝")]),t._v(" "),s("p",[t._v("import copy\ncopy.deepcopy()\n[1, 2, 34, 5, [3, 4, 5]]")]),t._v(" "),s("h2",{attrs:{id:"_13-简述赋值-浅copy-深copy的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-简述赋值-浅copy-深copy的关系"}},[t._v("#")]),t._v(" 13. 简述赋值，浅copy，深copy的关系")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("赋值 : 将变量和值在内存中形成映射指向关系")])]),t._v(" "),s("li",[s("p",[t._v("浅拷贝: 只拷贝第一层级里的所有元素, 单独开辟空间成型独立的一份副本 copy.copy()")])]),t._v(" "),s("li",[s("p",[t._v("深拷贝: 所有层级的元素都单独拷贝一份, 开辟全新的空间")])])]),t._v(" "),s("p",[t._v('"""\n(地址: 原不可变数据只是暂时的指向原数据, 可变的数据独立开辟新空间)\n"""\n"""\nimport copy\nlst1 = [1, 2, 3, [4, 5, 6]]\nlst2 = copy.deepcopy(lst1)')]),t._v(" "),s("p",[t._v('lst2[0] = 100\nprint(lst1, lst2)\nprint( id(lst1[-1]) , id(lst2[-1]) )\n"""')]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_14-pass的作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-pass的作用是什么"}},[t._v("#")]),t._v(" 14. pass的作用是什么")]),t._v(" "),s("p",[t._v("占位")]),t._v(" "),s("h2",{attrs:{id:"_15-看如何程序的结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-看如何程序的结果"}},[t._v("#")]),t._v(" 15. 看如何程序的结果")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" copy\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deepcopy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a, b 百分百一样")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1, 2, 4, 5, ['b', 'c', \"d\"], 5]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1, 2, 4, 5, ['b', 'c', \"d\"]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1, 2, 4, 5, ['b', 'c', \"d\"], 5]")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h2",{attrs:{id:"_16-打印99乘法表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-打印99乘法表"}},[t._v("#")]),t._v(" 16. 打印99乘法表")]),t._v(" "),s("p",[s("strong",[t._v("while 写法")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 打印表达式")]),t._v("\n\tj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d*%d=%2d "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 打印换行\t")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ti"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[s("strong",[t._v("for 写法")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 打印表达式")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d*%d=%2d "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 打印换行")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"_17-用python写一个斐波那契数列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-用python写一个斐波那契数列"}},[t._v("#")]),t._v(" 17. 用python写一个斐波那契数列")]),t._v(" "),s("p",[t._v("1 1 2 3 5 8 13 21 34 ....")]),t._v(" "),s("p",[s("strong",[t._v("方法一")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("lst "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tlst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("方法二")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("方法三")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### n n-1 n-2")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 结果 = 上一个值 + 上上个值")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" fib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\ndef fib(n):\n\tif n <= 2:\n\t\treturn 1\n\t### 结果 = 上一个值 + 上上个值\n\treturn fib(n-1) + fib(n-2)\n\nprint(fib(5))\n\n1 1 2 3 5\n\n# return 后面的值算完了才能通过return 进行返回\n\nreturn  3 + 2 => 5\nreturn  fib(4) => 3              +        fib(3)    => 2\n\n\tfib(3) + fib(2) => 1            fib(2) + fib(1) => 1 + 1\n\nfib(2) + fib(1) => 1 + 1 => 2\n\n调用函数时候, 每调用一次, 都需要在内存当中开辟一个栈帧空间\n递归就是不停的开辟空间和释放空间的过程\n递: 去\n归: 回 \n一去一回是递归\n\n触发递归回的过程有两个条件:\n\t(1) 最后一层栈帧空间代码全部执行完毕,触发回的过程,回到上一层空间的调用处;\n\t(2) 最后一层栈帧空间代码遇到了return,触发回的过程,回到上一层空间的调用处;\n\n"""')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br")])]),s("h2",{attrs:{id:"_18"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18"}},[t._v("#")]),t._v(" 18.")]),t._v(" "),s("p",[t._v("list(set(lst))")]),t._v(" "),s("h2",{attrs:{id:"_19"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19"}},[t._v("#")]),t._v(" 19.")]),t._v(" "),s("p",[t._v('from collections import Iterator, Iterable\nfp = open("文件", mode="r", encoding="utf-8")')]),t._v(" "),s("h3",{attrs:{id:"方法一-fp-是迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一-fp-是迭代器"}},[t._v("#")]),t._v(" 方法一 fp 是迭代器")]),t._v(" "),s("p",[t._v("for i in fp:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("print(i) ### 按照文本中的行进行遍历.\n")])])]),s("h3",{attrs:{id:"方法二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[t._v("#")]),t._v(" 方法二")]),t._v(" "),s("p",[t._v('with open("文件", mode="r", encoding="utf-8") as fp:')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("res = fp.read(100)\nwhile res:\n\tprint(res)\n\tres = fp.read(100)\n")])])]),s("h2",{attrs:{id:"_20"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20"}},[t._v("#")]),t._v(" 20.")]),t._v(" "),s("h3",{attrs:{id:"zip-拉链-返回迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zip-拉链-返回迭代器"}},[t._v("#")]),t._v(" zip 拉链  返回迭代器")]),t._v(" "),s("p",[t._v('it = zip( ("a", "b") , [1, 2] )\nprint(it)')]),t._v(" "),s("p",[t._v('dic = dict(zip( ("a", "b") , [1, 2] ))\nprint(dic)')]),t._v(" "),s("p",[t._v('a = dict(zip(  ("a", "b", "c", "d", "e"), (1, 2, 3, 4, 5)  )  )\nprint(a)')]),t._v(" "),s("h3",{attrs:{id:"enumerate-枚举-返回迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enumerate-枚举-返回迭代器"}},[t._v("#")]),t._v(" enumerate 枚举 返回迭代器")]),t._v(" "),s("p",[t._v('it = enumerate( ["a", "b"] )\nit = enumerate( ["a", "b"] , start=1) ### start 指定枚举值\ndic = dict(it)\nprint(dic)')]),t._v(" "),s("h2",{attrs:{id:"_21"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21"}},[t._v("#")]),t._v(" 21.")]),t._v(" "),s("p",[t._v("lambda 匿名函数 : 用一句话来表达只有返回值的无名函数\nlambda 参数 : 返回值")]),t._v(" "),s("h2",{attrs:{id:"第二十二题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十二题"}},[t._v("#")]),t._v(" 第二十二题")]),t._v(" "),s("h3",{attrs:{id:"arg-普通收集参数-收集多余没人要的普通实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-普通收集参数-收集多余没人要的普通实参"}},[t._v("#")]),t._v(" *arg     普通收集参数 : 收集多余没人要的普通实参")]),t._v(" "),s("h3",{attrs:{id:"kwargs-关键字收集参数-收集多余没人要的关键字实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kwargs-关键字收集参数-收集多余没人要的关键字实参"}},[t._v("#")]),t._v(" **kwargs 关键字收集参数: 收集多余没人要的关键字实参")]),t._v(" "),s("h2",{attrs:{id:"第二十三题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十三题"}},[t._v("#")]),t._v(" 第二十三题")]),t._v(" "),s("p",[t._v("def func():")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("global a\na = 90\n")])])]),s("p",[t._v("func()\nprint(a)")]),t._v(" "),s("h2",{attrs:{id:"第二十四题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十四题"}},[t._v("#")]),t._v(" 第二十四题")]),t._v(" "),s("p",[t._v("filter => 过滤数据\nfilter(函数, iterable)")]),t._v(" "),s("h3",{attrs:{id:"保留偶数-过滤掉所有的奇数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留偶数-过滤掉所有的奇数"}},[t._v("#")]),t._v(" 保留偶数 , 过滤掉所有的奇数")]),t._v(" "),s("p",[t._v("lst = [1, 2, 3, 4, 5]\nit = filter(lambda x : True if x % 2 == 0 else False , lst)\nprint(list(it))")]),t._v(" "),s("h3",{attrs:{id:"map-处理-映射-数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map-处理-映射-数据"}},[t._v("#")]),t._v(" map -> 处理(映射)数据")]),t._v(" "),s("p",[t._v("map(func, iterable) => 迭代器\nlst = [1, 2, 3]\nit = map(lambda x : x * 3, lst)\nprint(list(it))")]),t._v(" "),s("h3",{attrs:{id:"reduce-计算数据-一次性计算两个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reduce-计算数据-一次性计算两个参数"}},[t._v("#")]),t._v(" reduce -> 计算数据(一次性计算两个参数)")]),t._v(" "),s("p",[t._v('reduce(func, iterable) => 计算的结果\nfrom functools import reduce\nres = reduce(lambda x, y : x*10 + y , lst)\nprint(res)\n"""\n[5, 4, 8, 8] => 5488')]),t._v(" "),s("p",[t._v('5 * 10 + 4 = 54\n54 * 10 + 8 = 548\n548 * 10 + 8 = 5488\n"""')]),t._v(" "),s("h2",{attrs:{id:"第二十六题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十六题"}},[t._v("#")]),t._v(" 第二十六题")]),t._v(" "),s("p",[t._v("官方说法1000  实际是994 ~ 1000 层\n设置递归最大层数\nimport sys\nsys.setrecursionlimit(99999999999999999)")]),t._v(" "),s("h2",{attrs:{id:"第二十七题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十七题"}},[t._v("#")]),t._v(" 第二十七题")]),t._v(" "),s("p",[t._v("迭代器:    迭代数据的工具\n可迭代对象: 可以迭代的数据\n可迭代对象 => 迭代器\n把不能够直接通过next获取的数据 => 可以直接被next获取数据")]),t._v(" "),s("p",[t._v("dir(数据) => 查看该数据的内部成员\n具有 "),s("strong",[t._v("iter")]),t._v("() 和 "),s("strong",[t._v("next")]),t._v("() 两个方法的是迭代器\n具有 "),s("strong",[t._v("iter")]),t._v("() 可迭代对象")]),t._v(" "),s("h2",{attrs:{id:"第二十八题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十八题"}},[t._v("#")]),t._v(" 第二十八题")]),t._v(" "),s("p",[t._v("生成器的本质就是迭代器, 可以自定义迭代的逻辑\n创建方式两种")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("(1) 生成器表达式(推导式)  (i for i in range(10))\n(2) 生成器函数  (含有yield 关键字)\n")])])]),s("h3",{attrs:{id:"陷阱-tuple-i-for-i-in-range-10-强制转换成元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-tuple-i-for-i-in-range-10-强制转换成元组"}},[t._v("#")]),t._v(" 陷阱 tuple([i for i in range(10)]) => 强制转换成元组")]),t._v(" "),s("h2",{attrs:{id:"第二十九题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十九题"}},[t._v("#")]),t._v(" 第二十九题")]),t._v(" "),s("h3",{attrs:{id:"装饰器-再不改变原有代码的情况下-为原函数扩展新功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器-再不改变原有代码的情况下-为原函数扩展新功能"}},[t._v("#")]),t._v(" 装饰器: 再不改变原有代码的情况下, 为原函数扩展新功能")]),t._v(" "),s("h3",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("### (1)互相嵌套的两个函数,内函数使用了外函数的局部变量\n### (2)外函数把内函数返回出来的过程,是闭包,内函数是闭包函数;\n")])])]),s("h3",{attrs:{id:"装饰器的本质就是闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的本质就是闭包"}},[t._v("#")]),t._v(" 装饰器的本质就是闭包")]),t._v(" "),s("h3",{attrs:{id:"应用-登录认证-框架-django-flask-app-route-method-get-post"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用-登录认证-框架-django-flask-app-route-method-get-post"}},[t._v("#")]),t._v(' 应用: 登录认证, 框架(django, flask, @app.route("/", method=["GET", "POST"]))')]),t._v(" "),s("h2",{attrs:{id:"第三十题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三十题"}},[t._v("#")]),t._v(" 第三十题")]),t._v(" "),s("h3",{attrs:{id:"通过字符串去操作类对象-或者-模块当中的属性方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过字符串去操作类对象-或者-模块当中的属性方法"}},[t._v("#")]),t._v(" 通过字符串去操作类对象 或者 模块当中的属性方法")]),t._v(" "),s("h3",{attrs:{id:"hasattr-getattr-setattr-delattr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hasattr-getattr-setattr-delattr"}},[t._v("#")]),t._v(" hasattr  getattr() setattr() delattr()")]),t._v(" "),s("h3",{attrs:{id:"可以配合用户的输入-进行动态操作-调用其中的成员-通过api接口调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可以配合用户的输入-进行动态操作-调用其中的成员-通过api接口调用"}},[t._v("#")]),t._v(" 可以配合用户的输入, 进行动态操作, 调用其中的成员 | 通过api接口调用")]),t._v(" "),s("p",[t._v("def func(x):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("pass\n")])])]),s("p",[t._v("func(x)\n0 4 5 7 8 5 2")]),t._v(" "),s("p",[t._v("lst = [7, -8, 5, 4, 0, -2 , -5]\ndef func(x):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("if x >= 0:\n\treturn x\nelse:\n\treturn abs(x)+x\n")])])]),s("p",[t._v("res = sorted(lst, key=func)\nprint(res)")])])}),[],!1,null,null,null);s.default=r.exports}}]);